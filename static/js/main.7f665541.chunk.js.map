{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","id","Calculator","useState","display","setDisplay","stack","setStack","tempStack","setTempStack","operatorFlag","setOperatorFlag","result","setResult","operatorArr","setOperatorArr","calculate","e","flag","target","value","calculation","eval","String","TopDiv","MiddleDiv","BottomDiv","props","class","className","onClick","handleClick","slice","indexOf","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+1BAGMA,IAAM,WACR,OACI,kEAAKC,GAAG,MAAR,SACI,2DAACC,WAAD,OAKNA,WAAa,SAAbA,aACF,cAA8BC,oDAAS,KAAvC,2KAAOC,QAAP,cAAgBC,WAAhB,cACA,WAA0BF,oDAAS,IAAnC,4KAAOG,MAAP,cAAcC,SAAd,cACA,WAAkCJ,oDAAS,IAA3C,4KAAOK,UAAP,cAAkBC,aAAlB,cACA,WAAwCN,oDAAS,GAAjD,4KAAOO,aAAP,cAAqBC,gBAArB,cACA,WAA4BR,oDAAS,IAArC,6KAAOS,OAAP,eAAeC,UAAf,eACA,YAAsCV,oDAAS,IAA/C,8KAAOW,YAAP,eAAoBC,eAApB,eAIMC,UAAY,SAAZA,UAAaC,GACf,IAAMC,KAAOD,EAAEE,OAAOC,MACtB,GAAa,MAATF,KAAc,CACd,IAAMG,YAAcC,KAAKhB,MAAQE,WACjCD,SAASgB,OAAOF,cAChBR,UAAUU,OAAOF,cACjBhB,WAAWkB,OAAOF,cAClBZ,aAAa,QAEC,UAATS,OACLX,SAAS,IACTF,WAAW,KACXQ,UAAU,IACVJ,aAAa,MAIrB,OACI,mEAAKR,GAAG,qBAAR,UACI,2DAACuB,OAAD,CAAQpB,QAASA,UACjB,2DAACqB,UAAD,CAAWT,UAAWA,YACtB,2DAACU,UAAD,CAAWhB,aAAcA,aAAcC,gBAAiBA,gBAAiBG,YAAaA,YAAaC,eAAgBA,eAAgBP,UAAWA,UAAWC,aAAcA,aAAcH,MAAOA,MAAOC,SAAUA,SAAUH,QAASA,QAASC,WAAYA,iBAK3PmB,OAAS,SAACG,GACZ,OACI,kEAAK1B,GAAG,UAAU2B,MAAM,gBAAxB,SACI,iEAAI3B,GAAG,UAAP,SAAkB0B,EAAMvB,aAK9BqB,UAAY,SAACE,GAIf,OACI,mEAAK1B,GAAG,aAAa4B,UAAU,gBAA/B,UACI,qEAAQ5B,GAAG,QAAQmB,MAAM,QAAQU,QAASH,EAAMX,UAAhD,mBACA,qEAAQf,GAAG,SAASmB,MAAM,IAAIU,QAASH,EAAMX,UAA7C,mBAKNU,UAAY,SAACC,GACf,IAAMI,EAAc,SAACd,GACjB,IAAMG,EAAQH,EAAEE,OAAOC,MAGR,MAAVA,GAAmD,KAAjCG,OAAOI,EAAMrB,OAAO0B,OAAO,KAA+C,GAA/BL,EAAMvB,QAAQ6B,QAAQ,MAAyB,MAAVb,GAIzF,MAAVA,GAAmC,MAAlBO,EAAMvB,UAKtBuB,EAAMjB,aAYQ,MAAXU,GAA8B,MAAXA,GAA8B,MAAXA,GAA8B,MAAXA,EACrDO,EAAMnB,UAAU0B,OAAS,EACQ,KAA7BP,EAAMnB,UAAUwB,OAAO,IACvBL,EAAMpB,SAASoB,EAAMrB,MAAQqB,EAAMnB,UAAUwB,OAAO,IACpDL,EAAMlB,aAAaW,GACnBO,EAAMtB,WAAWe,GACjBO,EAAMhB,gBAAgB,KAGtBgB,EAAMpB,SAASoB,EAAMrB,MAAQqB,EAAMnB,UAAUwB,OAAO,IACpDL,EAAMlB,aAAaW,GACnBO,EAAMtB,WAAWe,GACjBO,EAAMhB,gBAAgB,KAG1BgB,EAAMpB,SAASoB,EAAMrB,MAAQqB,EAAMnB,WACnCmB,EAAMlB,aAAaW,GACnBO,EAAMtB,WAAWe,GACjBO,EAAMhB,gBAAgB,KAG1BgB,EAAMlB,aAAakB,EAAMnB,UAAYY,GACrCO,EAAMtB,WAAWsB,EAAMnB,UAAYY,IAjCzB,KAAVA,GAA4B,KAAVA,GAA4B,KAAVA,GAA4B,KAAVA,GACtDO,EAAMhB,gBAAgB,GACtBgB,EAAMpB,SAASoB,EAAMrB,MAAQqB,EAAMnB,WACnCmB,EAAMlB,aAAaW,GACnBO,EAAMtB,WAAWe,KAEjBO,EAAMlB,aAAakB,EAAMnB,UAAYY,GACrCO,EAAMtB,WAAWsB,EAAMnB,UAAYY,MA+B/C,OACI,mEAAKnB,GAAG,aAAa2B,MAAM,gBAA3B,UACI,mEAAK3B,GAAG,cAAR,UACI,qEAAQ2B,MAAM,SAAS3B,GAAG,OAAOmB,MAAM,IAAIU,QAASC,EAApD,eACA,qEAAQH,MAAM,SAAS3B,GAAG,QAAQmB,MAAM,IAAIU,QAASC,EAArD,eACA,qEAAQH,MAAM,SAAS3B,GAAG,QAAQmB,MAAM,IAAIU,QAASC,EAArD,eACA,qEAAQH,MAAM,SAAS3B,GAAG,MAAMmB,MAAM,IAAIU,QAASC,EAAnD,eACA,qEAAQH,MAAM,SAAS3B,GAAG,OAAOmB,MAAM,IAAIU,QAASC,EAApD,eACA,qEAAQH,MAAM,SAAS3B,GAAG,OAAOmB,MAAM,IAAIU,QAASC,EAApD,eACA,qEAAQH,MAAM,SAAS3B,GAAG,QAAQmB,MAAM,IAAIU,QAASC,EAArD,eACA,qEAAQH,MAAM,SAAS3B,GAAG,MAAMmB,MAAM,IAAIU,QAASC,EAAnD,eACA,qEAAQH,MAAM,SAAS3B,GAAG,MAAMmB,MAAM,IAAIU,QAASC,EAAnD,eACA,qEAAQH,MAAM,SAAS3B,GAAG,OAAOmB,MAAM,IAAIU,QAASC,EAApD,eACA,qEAAQH,MAAM,UAAU3B,GAAG,UAAUmB,MAAM,IAAIU,QAASC,EAAxD,kBAEJ,mEAAK9B,GAAG,gBAAR,UACI,qEAAQ2B,MAAM,WAAW3B,GAAG,MAAMmB,MAAM,IAAIU,QAASC,EAArD,eACA,qEAAQH,MAAM,WAAW3B,GAAG,WAAWmB,MAAM,IAAIU,QAASC,EAA1D,eACA,qEAAQH,MAAM,WAAW3B,GAAG,WAAWmB,MAAM,IAAIU,QAASC,EAA1D,eACA,qEAAQH,MAAM,WAAW3B,GAAG,SAASmB,MAAM,IAAIU,QAASC,EAAxD,sBAMD/B,2B,gICrIAmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC9C,EAAA,EAAD,MAEF+C,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7f665541.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n    return (\n        <div id=\"App\">\n            <Calculator />\n        </div>\n    );\n};\n\nconst Calculator = () => {\n    const [display, setDisplay] = useState('0');\n    const [stack, setStack] = useState('');\n    const [tempStack, setTempStack] = useState('');\n    const [operatorFlag, setOperatorFlag] = useState(0);\n    const [result, setResult] = useState('');\n    const [operatorArr, setOperatorArr] = useState('');\n\n\n\n    const calculate = (e) => {\n        const flag = e.target.value;\n        if (flag === \"=\") {\n            const calculation = eval(stack + tempStack); //using eval is risky for security\n            setStack(String(calculation));\n            setResult(String(calculation));\n            setDisplay(String(calculation));\n            setTempStack('');\n        }\n        else if (flag === \"clear\") {\n            setStack('');\n            setDisplay(\"0\");\n            setResult('');\n            setTempStack('')\n        }\n    }\n\n    return (\n        <div id=\"calculator-wrapper\">\n            <TopDiv display={display} />\n            <MiddleDiv calculate={calculate} />\n            <BottomDiv operatorFlag={operatorFlag} setOperatorFlag={setOperatorFlag} operatorArr={operatorArr} setOperatorArr={setOperatorArr} tempStack={tempStack} setTempStack={setTempStack} stack={stack} setStack={setStack} display={display} setDisplay={setDisplay} />\n        </div>\n    );\n};\n\nconst TopDiv = (props) => {\n    return (\n        <div id=\"top-div\" class=\"partition-div\">\n            <h2 id=\"display\">{props.display}</h2>\n        </div>\n    );\n};\n\nconst MiddleDiv = (props) => {\n\n\n\n    return (\n        <div id=\"middle-div\" className=\"partition-div\">\n            <button id=\"clear\" value=\"clear\" onClick={props.calculate}>Clear</button>\n            <button id=\"equals\" value=\"=\" onClick={props.calculate}>=</button>\n        </div>\n    );\n};\n\nconst BottomDiv = (props) => {\n    const handleClick = (e) => {\n        const value = e.target.value;\n\n        //prevents multiple decimal points\n        if ((value === \".\" && (String(props.stack).slice(-1) == '.')) || (props.display.indexOf(\".\") != -1) && value === \".\") {\n            return;\n        }\n        //prevents numbers starting w/ multiple zeroes\n        if (value === \"0\" && props.display === \"0\") {\n            return;\n        }\n\n        //when operatorFlag switches, tempStack is added to stack. Used to handle operator logic correctly.\n        if (!props.operatorFlag) {\n            if (value == (\"+\") || value == (\"/\") || value == (\"*\") || value == (\"-\")) {\n                props.setOperatorFlag(1);\n                props.setStack(props.stack + props.tempStack);\n                props.setTempStack(value);\n                props.setDisplay(value);\n            } else {\n                props.setTempStack(props.tempStack + value);\n                props.setDisplay(props.tempStack + value);\n            }\n        } else {//if props.operatorFlag true\n            //if next value is a number and tempStack needs to be added to stack\n            if (value !== (\"+\") && value !== (\"/\") && value !== (\"*\") && value !== (\"-\")) {\n                if (props.tempStack.length > 1) {//handles when more than one operator in tempStack\n                    if (props.tempStack.slice(-1) == \"-\") {//accounts for when using negative numbers\n                        props.setStack(props.stack + props.tempStack.slice(-2));\n                        props.setTempStack(value);\n                        props.setDisplay(value);\n                        props.setOperatorFlag(0);\n                    }\n                    else {\n                        props.setStack(props.stack + props.tempStack.slice(-1));\n                        props.setTempStack(value);\n                        props.setDisplay(value);\n                        props.setOperatorFlag(0);\n                    }\n                } else {//when only one operator in tempStack, no calculus needed\n                    props.setStack(props.stack + props.tempStack);\n                    props.setTempStack(value);\n                    props.setDisplay(value);\n                    props.setOperatorFlag(0);\n                }\n            } else {\n                props.setTempStack(props.tempStack + value);\n                props.setDisplay(props.tempStack + value);\n            }\n        }\n    }\n\n    return (\n        <div id=\"bottom-div\" class=\"partition-div\">\n            <div id=\"numbers-div\">\n                <button class=\"number\" id=\"nine\" value=\"9\" onClick={handleClick}>9</button>\n                <button class=\"number\" id=\"eight\" value=\"8\" onClick={handleClick}>8</button>\n                <button class=\"number\" id=\"seven\" value=\"7\" onClick={handleClick}>7</button>\n                <button class=\"number\" id=\"six\" value=\"6\" onClick={handleClick}>6</button>\n                <button class=\"number\" id=\"five\" value=\"5\" onClick={handleClick}>5</button>\n                <button class=\"number\" id=\"four\" value=\"4\" onClick={handleClick}>4</button>\n                <button class=\"number\" id=\"three\" value=\"3\" onClick={handleClick}>3</button>\n                <button class=\"number\" id=\"two\" value=\"2\" onClick={handleClick}>2</button>\n                <button class=\"number\" id=\"one\" value=\"1\" onClick={handleClick}>1</button>\n                <button class=\"number\" id=\"zero\" value=\"0\" onClick={handleClick}>0</button>\n                <button class=\"decimal\" id=\"decimal\" value=\".\" onClick={handleClick}>.</button>\n            </div>\n            <div id=\"operators-div\">\n                <button class=\"operator\" id=\"add\" value=\"+\" onClick={handleClick}>+</button>\n                <button class=\"operator\" id=\"subtract\" value=\"-\" onClick={handleClick}>-</button>\n                <button class=\"operator\" id=\"multiply\" value=\"*\" onClick={handleClick}>x</button>\n                <button class=\"operator\" id=\"divide\" value=\"/\" onClick={handleClick}>/</button>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}